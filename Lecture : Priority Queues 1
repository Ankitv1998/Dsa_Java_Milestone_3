****************************************************************************************************************************
****************************************************************************************************************************
Code : Remove Min
****************************************************************************************************************************

import java.util.ArrayList;

public class PQ {

	private ArrayList<Integer> heap;

	public PQ() {
		heap = new ArrayList<Integer>();
	}

	boolean isEmpty() {
		return heap.size() == 0;
	}

	int size() {
		return heap.size();
	}

	int getMin() throws PriorityQueueException {
		if (isEmpty()) {
			// Throw an exception
			throw new PriorityQueueException();
		}
		return heap.get(0);
	}

	void insert(int element) {
		heap.add(element);
		int childIndex = heap.size() - 1;
		int parentIndex = (childIndex - 1) / 2;

		while (childIndex > 0) {
			if (heap.get(childIndex) < heap.get(parentIndex)) {
				int temp = heap.get(childIndex);
				heap.set(childIndex, heap.get(parentIndex));
				heap.set(parentIndex, temp);
				childIndex = parentIndex;
				parentIndex = (childIndex - 1) / 2;
			} else {
				return;
			}
		}
	}

	int removeMin() throws PriorityQueueException {
		// Throw the exception PriorityQueueException if queue is empty
		if (isEmpty()) {
			throw new PriorityQueueException();
		}
		int minElement = heap.get(0);
		int lastElement = heap.remove(heap.size() - 1);
		if (!isEmpty()) {
			heap.set(0, lastElement);
			downHeapify(0);
		}
		return minElement;
	}

	void downHeapify(int index) {
		int leftChildIndex = 2 * index + 1;
		int rightChildIndex = 2 * index + 2;
		int minIndex = index;
		if (leftChildIndex < size() && heap.get(leftChildIndex) < heap.get(minIndex)) {
			minIndex = leftChildIndex;
		}
		if (rightChildIndex < size() && heap.get(rightChildIndex) < heap.get(minIndex)) {
			minIndex = rightChildIndex;
		}
		if (minIndex != index) {
			int temp = heap.get(index);
			heap.set(index, heap.get(minIndex));
			heap.set(minIndex, temp);
			downHeapify(minIndex);
		}
	}
}

class PriorityQueueException extends Exception {

}

****************************************************************************************************************************
Code : Max Priority Queue
****************************************************************************************************************************
import java.util.ArrayList;

public class PQ {
	private ArrayList<Integer> heap;

	public PQ() {
		heap = new ArrayList<Integer>();
	}

	boolean isEmpty() {
		return heap.size() == 0;
	}

	int getSize() {
		return heap.size();
	}

	int getMax() {
		if (isEmpty()) {
			return Integer.MIN_VALUE;
		}
		return heap.get(0);
	}

	void insert(int element) {
		heap.add(element);
		int childIndex = heap.size() - 1;
		int parentIndex = (childIndex - 1) / 2;

		while (childIndex > 0) {
			if (heap.get(childIndex) > heap.get(parentIndex)) {
				int temp = heap.get(childIndex);
				heap.set(childIndex, heap.get(parentIndex));
				heap.set(parentIndex, temp);
				childIndex = parentIndex;
				parentIndex = (childIndex - 1) / 2;
			} else {
				return;
			}
		}
	}

	int removeMax() {
		if (isEmpty()) {
			return Integer.MIN_VALUE;
		}
		int removed = heap.get(0);
		heap.set(0, heap.get(heap.size() - 1));
		heap.remove(heap.size() - 1);

		int parentIndex = 0;
		int leftChildIndex = 2 * parentIndex + 1;
		int rightChildIndex = 2 * parentIndex + 2;

		while (leftChildIndex < heap.size()) {
			int maxIndex = parentIndex;
			if (heap.get(leftChildIndex) > heap.get(maxIndex)) {
				maxIndex = leftChildIndex;
			}
			if (rightChildIndex < heap.size() && heap.get(rightChildIndex) > heap.get(maxIndex)) {
				maxIndex = rightChildIndex;
			}
			if (maxIndex == parentIndex) {
				break;
			} else {
				int temp = heap.get(parentIndex);
				heap.set(parentIndex, heap.get(maxIndex));
				heap.set(maxIndex, temp);
				parentIndex = maxIndex;
				leftChildIndex = 2 * parentIndex + 1;
				rightChildIndex = 2 * parentIndex + 2;
			}
		}
		return removed;
	}
}


