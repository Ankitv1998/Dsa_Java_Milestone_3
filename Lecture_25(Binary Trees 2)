**************************************************************************************************************************
Mirror Binary Tree
**************************************************************************************************************************

/*
	
	Following is the structure used to represent the Binary Tree Node

	class BinaryTreeNode<T> {
		T data;
		BinaryTreeNode<T> left;
		BinaryTreeNode<T> right;

		public BinaryTreeNode(T data) {
			this.data = data;
			this.left = null;
			this.right = null;
		}
	}

*/


**************************************************************************************************************************
public class Solution {
**************************************************************************************************************************


	public static void mirrorBinaryTree(BinaryTreeNode<Integer> root){
		//Your code goes here
		if(root==null)
		return;

		//swap left to right children
		BinaryTreeNode<Integer> temp=root.left;
		root.left=root.right;
		root.right=temp;

		//recursively mirror the left and right subtrees
		mirrorBinaryTree(root.left);
		mirrorBinaryTree(root.right);
	}
	
}

**************************************************************************************************************************
Diameter of Binary Tree
**************************************************************************************************************************

/*
	
	Following is the structure used to represent the Binary Tree Node

	class BinaryTreeNode<T> {
		T data;
		BinaryTreeNode<T> left;
		BinaryTreeNode<T> right;

		public BinaryTreeNode(T data) {
			this.data = data;
			this.left = null;
			this.right = null;
		}
	}

*/

public class Solution {

	public static int diameterOfBinaryTree(BinaryTreeNode<Integer> root){
		//Your code goes here
		if(root==null)
		{
			return 0;
		}
		return findHeight(root.left)+findHeight(root.right)+1;

	}

	public static int findHeight(BinaryTreeNode<Integer>root)
	{
		if(root==null)
		{
			return 0;
		}
		int leftHeight=findHeight(root.left);
		int rightHeight=findHeight(root.right);

		if(leftHeight>rightHeight)
		{
			return leftHeight+1;
		}
		else
		{ 
			return rightHeight+1;
		}
	}
	
}

**************************************************************************************************************************
Print Levelwise
**************************************************************************************************************************

/*
	
	Following is the structure used to represent the Binary Tree Node

	class BinaryTreeNode<T> {
		T data;
		BinaryTreeNode<T> left;
		BinaryTreeNode<T> right;

		public BinaryTreeNode(T data) {
			this.data = data;
			this.left = null;
			this.right = null;
		}
	}

*/

public class Solution {

/*	Binary Tree Node class
 * 
 * class BinaryTreeNode<T> {
		T data;
		BinaryTreeNode<T> left;
		BinaryTreeNode<T> right;
		
		public BinaryTreeNode(T data) {
			this.data = data;
		}
	}
	*/
	public static void printLevelWise(BinaryTreeNode<Integer> root) {
		/* Your class should be named Solution
		* Don't write main().
		* Don't read input, it is passed as function argument.
		* Print output and don't return it.
		* Taking input is handled automatically.
		*/
	QueueUsingLL<BinaryTreeNode<Integer>> pendingNodes = new QueueUsingLL<>();
		pendingNodes.enqueue(root);
		
		while (!pendingNodes.isEmpty()) {
			BinaryTreeNode<Integer> frontNode = null;
			try {
				frontNode = pendingNodes.dequeue();
			} catch (QueueEmptyException e) {
				e.printStackTrace();
			}
			System.out.print(frontNode.data + ":");
			if (frontNode.left != null) {
				pendingNodes.enqueue(frontNode.left);
				System.out.print("L:" + frontNode.left.data + ",");
			} else {
				System.out.print("L:" + "-1" + ",");
			}
			if (frontNode.right != null) {
				pendingNodes.enqueue(frontNode.right);
				System.out.print("R:" + frontNode.right.data);
				System.out.println();
			} else {
				System.out.print("R:" + "-1");
				System.out.println();
			}
		}
	}
}


**************************************************************************************************************************
Construct Tree using Inorder and Preorder
**************************************************************************************************************************

/*
	
	Following is the structure used to represent the Binary Tree Node

	class BinaryTreeNode<T> {
		T data;
		BinaryTreeNode<T> left;
		BinaryTreeNode<T> right;

		public BinaryTreeNode(T data) {
			this.data = data;
			this.left = null;
			this.right = null;
		}
	}

*/

public class Solution {

	public static BinaryTreeNode<Integer> buildTree(int[] preOrder, int[] inOrder) {
		//Your code goes here
		return buildTreeHelper(preOrder, 0, preOrder.length - 1, inOrder, 0, inOrder.length - 1);
}

private static BinaryTreeNode<Integer> buildTreeHelper(int[] preOrder, int preStart, int preEnd, int[] inOrder, int inStart, int inEnd) {
    if (preStart > preEnd || inStart > inEnd) {
        return null;
    }
    int rootValue = preOrder[preStart];
    BinaryTreeNode<Integer> root = new BinaryTreeNode<>(rootValue);
    int k = 0;
    for (int i = inStart; i <= inEnd; i++) {
        if (inOrder[i] == rootValue) {
            k = i;
            break;
        }
    }
    root.left = buildTreeHelper(preOrder, preStart + 1, preStart + k - inStart, inOrder, inStart, k - 1);
    root.right = buildTreeHelper(preOrder, preStart + k - inStart + 1, preEnd, inOrder, k + 1, inEnd);
    return root;
	}

}

/** 1st given Preorder
2nd output Inorder */



**************************************************************************************************************************
Construct Tree Using Inorder and PostOrder
**************************************************************************************************************************

**************************************************************************************************************************
/*
	
	Following is the structure used to represent the Binary Tree Node

	class BinaryTreeNode<T> {
		T data;
		BinaryTreeNode<T> left;
		BinaryTreeNode<T> right;

		public BinaryTreeNode(T data) {
			this.data = data;
			this.left = null;
			this.right = null;
		}
	}

*/

public class Solution {

	public static BinaryTreeNode<Integer> buildTree(int[] postOrder, int[] inOrder) {
		return buildTreeHelper(postOrder, inOrder, 0, postOrder.length - 1, 0, inOrder.length - 1);
	}

	private static BinaryTreeNode<Integer> buildTreeHelper(int[] postOrder, int[] inOrder, int postStart, int postEnd, int inStart, int inEnd) {
		if (postStart > postEnd || inStart > inEnd) {
			return null;
		}

		int rootValue = postOrder[postEnd];
		BinaryTreeNode<Integer> root = new BinaryTreeNode<>(rootValue);

		int rootIndexInorder = -1;
		for (int i = inStart; i <= inEnd; i++) {
			if (inOrder[i] == rootValue) {
				rootIndexInorder = i;
				break;
			}
		}

		int leftSubtreeSize = rootIndexInorder - inStart;
		int rightSubtreeSize = inEnd - rootIndexInorder;

		root.left = buildTreeHelper(postOrder, inOrder, postStart, postStart + leftSubtreeSize - 1, inStart, rootIndexInorder - 1);
		root.right = buildTreeHelper(postOrder, inOrder, postEnd - rightSubtreeSize, postEnd - 1, rootIndexInorder + 1, inEnd);

		return root;
	}
/*****10 20  -1 30 40 50 -1 60 -1 -1 -1 -1 -1 -1  *****/
}
/**1st Line: N array size
2ndline::: Postorder - 
3rd Line::order Traversal*
Output:::...*/

****************************************************************************************************************************************************************************************************************************************************
**************************************************************************************************************************
Assignment
**************************************************************************************************************************
**************************************************************************************************************************
Create & Insert Duplicate Node
****************************************************************************************************************************************************************************************************************************************************
/*
	
	Following is the structure used to represent the Binary Tree Node

	class BinaryTreeNode<T> {
		T data;
		BinaryTreeNode<T> left;
		BinaryTreeNode<T> right;

		public BinaryTreeNode(T data) {
			this.data = data;
			this.left = null;
			this.right = null;
		}
	}

*/


		public class Solution {

	public static void insertDuplicateNode(BinaryTreeNode<Integer> root) {
		//Your code goes here
        if (root==null)
            return;

        BinaryTreeNode<Integer> duplicateNode = new BinaryTreeNode<Integer>(root.data);
        //duplicateNode.data=root.data;
        BinaryTreeNode<Integer> temp=root.left;
        root.left=duplicateNode;
        duplicateNode.left=temp;
        insertDuplicateNode(root.left.left);
        insertDuplicateNode(root.right);   
	}
}

**************************************************************************************************************************
Minimum and Maximum in the Binary Tree
**************************************************************************************************************************

/*
	
	Following is the structure used to represent the Binary Tree Node

	class BinaryTreeNode<T> {
		T data;
		BinaryTreeNode<T> left;
		BinaryTreeNode<T> right;

		public BinaryTreeNode(T data) {
			this.data = data;
			this.left = null;
			this.right = null;
		}
	}

*/



/*

	Representation of the Pair Class

	class Pair<T, U> {
		T minimum;
		U maximum;

		public Pair(T minimum, U maximum) {
			this.minimum = minimum;
			this.maximum = maximum;
		}

	}

*/

public class Solution {

	private static Pair<Integer, Integer> maxMin = new Pair<Integer, Integer>(Integer.MAX_VALUE, Integer.MIN_VALUE);

	public static Pair<Integer, Integer> getMinAndMax(BinaryTreeNode<Integer> root) {
		// Your code goes here
		getMinAndMaxHelper(root);
		return maxMin;

	}

	private static void getMinAndMaxHelper(BinaryTreeNode<Integer> root) {
		if (root == null) {
			return;
		}

		int rootData = root.data;
		int maxVal = maxMin.maximum;
		if (rootData > maxVal) {
			maxMin.maximum = root.data;
		}

		int minVal = maxMin.minimum;
		if (rootData < minVal) {
			maxMin.minimum = root.data;
		}
		getMinAndMaxHelper(root.left);
		getMinAndMaxHelper(root.right);
	}

}

**************************************************************************************************************************
Level Order Traversal
**************************************************************************************************************************
/*
	
	Following is the structure used to represent the Binary Tree Node

	class BinaryTreeNode<T> {
		T data;
		BinaryTreeNode<T> left;
		BinaryTreeNode<T> right;

		public BinaryTreeNode(T data) {
			this.data = data;
			this.left = null;
			this.right = null;
		}
	}

*/

import java.util.*;

public class Solution {

	public static void printLevelWise(BinaryTreeNode<Integer> root) {
		if (root == null) {
			return;
		}

		Queue<BinaryTreeNode<Integer>> queue = new LinkedList<>();
		queue.add(root);

		while (!queue.isEmpty()) {
			int size = queue.size();
			for (int i = 0; i < size; i++) {
				BinaryTreeNode<Integer> node = queue.poll();
				System.out.print(node.data + " ");
				if (node.left != null) {
					queue.add(node.left);
				}
				if (node.right != null) {
					queue.add(node.right);
				}
			}
			System.out.println();
		}
	}
}

**************************************************************************************************************************
Path Sum Root to Leaf
**************************************************************************************************************************

/*
	
	Following is the structure used to represent the Binary Tree Node

	class BinaryTreeNode<T> {
		T data;
		BinaryTreeNode<T> left;
		BinaryTreeNode<T> right;

		public BinaryTreeNode(T data) {
			this.data = data;
			this.left = null;
			this.right = null;
		}
	}

*/

public class Solution
 {

	public static void rootToLeafPathsSumToK(BinaryTreeNode<Integer> root, int k)
	 {
		// Your code goes here
		String arr = "";
		rootToLeafPathsSumToK(root, k, arr);
	}

	public static void rootToLeafPathsSumToK(BinaryTreeNode<Integer> root, int k, String arr) 
	{
		if (root == null) 
		{
			return;
		}

		int rootData = root.data;
		
		arr = arr + rootData + " ";
		if (k == rootData && root.left == null && root.right == null)
		{
			
			System.out.println(arr);
			return;
		}
		rootToLeafPathsSumToK(root.left, k - rootData, arr);
		rootToLeafPathsSumToK(root.right, k - rootData, arr);
	}

}


**************************************************************************************************************************
Print nodes at distance k from node
**************************************************************************************************************************
/*
	
	Following is the structure used to represent the Binary Tree Node

	class BinaryTreeNode<T> {
		T data;
		BinaryTreeNode<T> left;
		BinaryTreeNode<T> right;

		public BinaryTreeNode(T data) {
			this.data = data;
			this.left = null;
			this.right = null;
		}
	}

*/

public class Solution {

	public static void nodesAtDistanceK(BinaryTreeNode<Integer> root, int node, int k) {
	    //Your code goes here
        print(root,node,k);
        
        
	}
    
    private static int print(BinaryTreeNode<Integer> root, int node, int k)
    {
        //If tree is empty return -1
        if (root==null)
            return -1;
        
        int rootData=root.data;
        if (rootData==node)
        {
            printNodesAtDistanceK(root, k);
            return 0;
        }
        
        int leftSubTreeDist=0,rightSubTreeDist=0;
        
        leftSubTreeDist=print(root.left,node,k);
        if (leftSubTreeDist!=-1)
        {
            if(leftSubTreeDist+1==k)
            {
                System.out.println(rootData);
            }
            else
            {
                rightSubTreeDist=k-(leftSubTreeDist+1)-1;
                printNodesAtDistanceK(root.right, rightSubTreeDist);
            }
            return leftSubTreeDist+1;
        }
        
        rightSubTreeDist=print(root.right,node,k);
        if (rightSubTreeDist!=-1)
        {
            if(rightSubTreeDist+1==k)
            {
                System.out.println(rootData);
            }
            else
            {
                leftSubTreeDist=k-(rightSubTreeDist+1)-1;
                printNodesAtDistanceK(root.left, leftSubTreeDist);
            }
            return rightSubTreeDist+1;
        }
        return -1;
    }
    
    private static void printNodesAtDistanceK(BinaryTreeNode<Integer> root, int k)
    {
        if (root==null || k<0)
        	return;
        
        if (k == 0)  
        { 
            System.out.println(root.data); 
            return; 
        }
        
        printNodesAtDistanceK(root.left,k-1);
        printNodesAtDistanceK(root.right,k-1);
    }

}




