***************************************************************************************************************************
***************************************************************************************************************************
Code: Rat In A Maze
***************************************************************************************************************************

public class Solution {

    public static boolean ratInAMaze(int maze[][]) {
        int n = maze.length;
        boolean[][] visited = new boolean[n][n];
        return solveMaze(maze, 0, 0, n-1, n-1, visited);
    }

    private static boolean solveMaze(int[][] maze, int x, int y, int destX, int destY, boolean[][] visited) {
        int n = maze.length;
        // check if (x, y) is out of bounds or is blocked
        if (x < 0 || y < 0 || x >= n || y >= n || maze[x][y] == 0) {
            return false;
        }
        // check if (x, y) is the destination
        if (x == destX && y == destY) {
            return true;
        }
        // check if (x, y) has already been visited
        if (visited[x][y]) {
            return false;
        }
        visited[x][y] = true;
        // check if rat can move to the right
        if (solveMaze(maze, x, y+1, destX, destY, visited)) {
            return true;
        }
        // check if rat can move down
        if (solveMaze(maze, x+1, y, destX, destY, visited)) {
            return true;
        }
        // check if rat can move to the left
        if (solveMaze(maze, x, y-1, destX, destY, visited)) {
            return true;
        }
        // check if rat can move up
        if (solveMaze(maze, x-1, y, destX, destY, visited)) {
            return true;
        }
        // mark (x, y) as unvisited and return false
        visited[x][y] = false;
        return false;
    }
}

***************************************************************************************************************************
Code: Rat In a Maze All Paths
***************************************************************************************************************************


public class Solution {

    static void ratInAMaze(int maze[][], int n) {
        int[][] solution = new int[n][n]; // to store the solution path
        findPath(maze, 0, 0, solution, n);
    }

    static void findPath(int[][] maze, int x, int y, int[][] solution, int n) {
        // check if (x,y) is a valid cell and not visited
        if (x < 0 || x >= n || y < 0 || y >= n || maze[x][y] == 0 || solution[x][y] == 1) {
            return;
        }

        // mark (x,y) as visited
        solution[x][y] = 1;

        // if (x,y) is destination cell, print the path
        if (x == n - 1 && y == n - 1) {
            printSolution(solution, n);
        }

        // recursive calls in order: top, down, left, right
        findPath(maze, x - 1, y, solution, n); // top
        findPath(maze, x + 1, y, solution, n); // down
        findPath(maze, x, y - 1, solution, n); // left
        findPath(maze, x, y + 1, solution, n); // right

        // mark (x,y) as unvisited to backtrack
        solution[x][y] = 0;
    }

    static void printSolution(int[][] solution, int n) {
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                System.out.print(solution[i][j] + " ");
            }
        }
        System.out.println();
    }
}

***************************************************************************************************************************
Code: N Queens
***************************************************************************************************************************


public class Solution {

	public static void placeNQueens(int n) {
		int[][] board = new int[n][n];
		solveNQueens(board, n, 0);
	}

	private static void solveNQueens(int[][] board, int n, int row) {
		if (row == n) { // All queens have been placed
			printBoard(board);
			return;
		}

		// Try placing queen in each column of current row
		for (int col = 0; col < n; col++) {
			if (isSafe(board, n, row, col)) {
				board[row][col] = 1;
				solveNQueens(board, n, row + 1);
				board[row][col] = 0; // backtrack
			}
		}
	}

	private static boolean isSafe(int[][] board, int n, int row, int col) {
		// Check if any queen is present in current column
		for (int i = 0; i < row; i++) {
			if (board[i][col] == 1) {
				return false;
			}
		}

		// Check if any queen is present in upper left diagonal
		for (int i = row, j = col; i >= 0 && j >= 0; i--, j--) {
			if (board[i][j] == 1) {
				return false;
			}
		}

		// Check if any queen is present in upper right diagonal
		for (int i = row, j = col; i >= 0 && j < n; i--, j++) {
			if (board[i][j] == 1) {
				return false;
			}
		}

		return true;
	}

	private static void printBoard(int[][] board) {
		for (int i = 0; i < board.length; i++) {
			for (int j = 0; j < board[i].length; j++) {
				System.out.print(board[i][j] + " ");
			}
		}
		System.out.println();
	}
}
